#
K8S_VER = ""
#K8S_VER = "=1.26.1-00"
#UBU_VER = "ubuntu/focal64"
UBU_VER = "ubuntu/jammy64"
#
Vagrant.configure("2") do |config|
  config.vm.define "cp" do |cp|
    cp.vm.box = UBU_VER
    cp.vm.network "private_network", ip: "192.168.56.21"
    cp.vm.hostname = "cp"
    cp.vm.provider "virtualbox" do |vb|
      vb.memory = 4096
    end
    cp.vm.provision "shell", args: "#{K8S_VER}", inline: <<-SHELLCP
      echo "### Generate rsa keys"
      if [ ! -f "$HOME/.ssh/id_rsa.pub"  ] ||  [ ! -f "$HOME/.ssh/id_rsa" ]
      then
        ssh-keygen -f $HOME/.ssh/id_rsa -P ""
        cp $HOME/.ssh/id_rsa /vagrant/vagrant_id_rsa
        cp $HOME/.ssh/id_rsa.pub /vagrant/vagrant_id_rsa.pub
      else
        cp /vagrant/vagrant_id_rsa $HOME/.ssh/id_rsa
        cp /vagrant/vagrant_id_rsa.pub $HOME/.ssh/id_rsa.pub
      fi
      cp $HOME/.ssh/id_rsa.pub $HOME/.ssh/authorized_keys
      echo "### OS update"
      apt-get update && apt-get upgrade -y
      echo "### Install apps"
      apt-get install -y vimecho "### swapoff"
      apt-get install curl apt-transport-https vim git wget gnupg2 software-properties-common apt-transport-https ca-certificates uidmap -y
      echo "### swapoff"
      swapoff -a
      echo "### modprobe"
      modprobe overlay
      modprobe br_netfilter
      echo "### sysctl"
      echo 'net.bridge.bridge-nf-call-ip6tables = 1' >> /etc/sysctl.d/kubernetes.conf
      echo 'net.bridge.bridge-nf-call-iptables = 1' >> /etc/sysctl.d/kubernetes.conf
      echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.d/kubernetes.conf
      sysctl --system
      echo "### keyrings"
      sudo mkdir -m 0755 -p /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      echo "### Install contaierd"
      apt update && apt-get install containerd.io -y
      #sed -e '/cri/ s/^#*/#/' -i /etc/containerd/config.toml 
      containerd config default > /etc/containerd/config.toml
      echo "runtime-endpoint: unix:///run/containerd/containerd.sock" > /etc/crictl.yaml
      echo "image-endpoint: unix:///run/containerd/containerd.sock" >> /etc/crictl.yaml
      echo "timeout: 10" >> /etc/crictl.yaml
      echo "debug: false" >> /etc/crictl.yaml
      systemctl restart containerd.service 
      echo "### K8s repo"
      echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      apt-get update
      echo "### Install K8s"
      apt-get install -y kubeadm$1 kubelet$1 kubectl$1 etcd-client
      apt-mark hold kubelet kubeadm kubectl
      sed -i '/cp/d' /etc/hosts
      echo '192.168.56.21  k8scp  cp' >> /etc/hosts
      echo '192.168.56.22  worker' >> /etc/hosts
      echo '192.168.56.23  student' >> /etc/hosts
      echo "### K8s init"
      kubeadm init --apiserver-advertise-address=192.168.56.21 --pod-network-cidr=10.244.0.0/16 | tee /root/kubeadm-init.out
      kubeadm token create --print-join-command > /vagrant/kubeadm_join.sh
      mkdir -p $HOME/.kube
      sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo cp /etc/kubernetes/admin.conf /vagrant/
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
      runuser -l vagrant -c 'echo "sudo -i"  >> $HOME/.bashrc'
      #kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
      #kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
      #kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
      apt-get install bash-completion -y
      source <(kubectl completion bash)
      echo "source <(kubectl completion bash)" >> $HOME/.bashrc
      echo "alias k=kubectl" >> $HOME/.bashrc
      echo "complete -F __start_kubectl k" >> $HOME/.bashrc
      #kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.5.1/deploy/static/provider/baremetal/deploy.yaml
      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/baremetal/deploy.yaml
      #kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml
      #echo "openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/Ë†.* //'" > /home/student/kube_get_ca.sh
      # Install Falco
      curl -s https://falco.org/repo/falcosecurity-packages.asc | apt-key add -
      echo "deb https://download.falco.org/packages/deb stable main" | tee -a /etc/apt/sources.list.d/falcosecurity.list
      apt-get update -y
      apt install -y dkms make linux-headers-$(uname -r)
      FALCO_FRONTEND=noninteractive apt-get install -y falco
      falco-driver-loader bpf
      systemctl start falco-bpf.service
    SHELLCP
  end

  config.vm.define "worker" do |worker|
    worker.vm.box = UBU_VER
    worker.vm.network "private_network", ip: "192.168.56.22"
    worker.vm.hostname = "worker"
    worker.vm.provider "virtualbox" do |vb|
      vb.memory = 4096
    end
    worker.vm.provision "shell", args: "#{K8S_VER}", inline: <<-SHELLWORKER
      cp /vagrant/vagrant_id_rsa $HOME/.ssh/id_rsa
      cp /vagrant/vagrant_id_rsa.pub $HOME/.ssh/id_rsa.pub
      cp $HOME/.ssh/id_rsa.pub $HOME/.ssh/authorized_keys
      runuser -l vagrant -c 'echo "sudo -i"  >> $HOME/.bashrc'
      apt-get update && apt-get upgrade -y
      apt-get install -y vim
      apt-get install curl apt-transport-https vim git wget gnupg2 software-properties-common apt-transport-https ca-certificates uidmap -y
      swapoff -a
      modprobe overlay
      modprobe br_netfilter
      echo 'net.bridge.bridge-nf-call-ip6tables = 1' >> /etc/sysctl.d/kubernetes.conf
      echo 'net.bridge.bridge-nf-call-iptables = 1' >> /etc/sysctl.d/kubernetes.conf
      echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.d/kubernetes.conf
      sysctl --system
      sudo mkdir -m 0755 -p /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt update && apt-get install containerd.io -y
      #sed -e '/cri/ s/^#*/#/' -i /etc/containerd/config.toml 
      containerd config default > /etc/containerd/config.toml
      echo "runtime-endpoint: unix:///run/containerd/containerd.sock" > /etc/crictl.yaml
      echo "image-endpoint: unix:///run/containerd/containerd.sock" >> /etc/crictl.yaml
      echo "timeout: 10" >> /etc/crictl.yaml
      echo "debug: false" >> /etc/crictl.yaml
      systemctl restart containerd.service 
      echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      apt-get update
      apt-get install -y kubeadm$1 kubelet$1 kubectl$1
      apt-mark hold kubelet kubeadm kubectl
      sed -i '/worker/d' /etc/hosts
      echo '192.168.56.21  k8scp  cp' >> /etc/hosts
      echo '192.168.56.22  worker' >> /etc/hosts
      echo '192.168.56.23  student' >> /etc/hosts
      echo "      routes:" >> /etc/netplan/50-vagrant.yaml
      echo "      - to: 10.96.0.0/12" >> /etc/netplan/50-vagrant.yaml
      echo "        via: 192.168.56.21" >> /etc/netplan/50-vagrant.yaml
      netplan apply
      sh /vagrant/kubeadm_join.sh
      # Install Falco
      curl -s https://falco.org/repo/falcosecurity-packages.asc | apt-key add -
      echo "deb https://download.falco.org/packages/deb stable main" | tee -a /etc/apt/sources.list.d/falcosecurity.list
      apt-get update -y
      apt install -y dkms make linux-headers-$(uname -r)
      FALCO_FRONTEND=noninteractive apt-get install -y falco
      falco-driver-loader bpf
      systemctl start falco-bpf.service
    SHELLWORKER
  end

  config.vm.define "student" do |student|
    student.vm.box = UBU_VER
    student.vm.network "private_network", ip: "192.168.56.23"
    student.vm.hostname = "student"
    student.vm.provision "shell", args: "#{K8S_VER}", inline: <<-SHELLSTUDENT
      cp /vagrant/vagrant_id_rsa $HOME/.ssh/id_rsa
      cp /vagrant/vagrant_id_rsa.pub $HOME/.ssh/id_rsa.pub
      cp $HOME/.ssh/id_rsa.pub $HOME/.ssh/authorized_keys
      useradd -m -s /bin/bash -p sakZ/dnex68yw student
      echo 'student ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/student
      chmod 440 /etc/sudoers.d/student
      runuser -l student -c 'mkdir $HOME/.ssh'
      runuser -l student -c 'chmod go-rwx $HOME/.ssh'
      runuser -l student -c 'sudo cp /vagrant/vagrant_id_rsa $HOME/.ssh/id_rsa'
      runuser -l student -c 'sudo cp /vagrant/vagrant_id_rsa.pub $HOME/.ssh/id_rsa.pub'
      runuser -l student -c 'sudo chown student:student .ssh/id_rsa*'
      echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      apt-get update
      apt-get install -y kubeadm$1 kubectl$1
      apt-mark hold kubelet kubeadm kubectl
      runuser -l student -c 'mkdir -p $HOME/.kube'
      runuser -l student -c 'sudo cp /vagrant/admin.conf $HOME/.kube/config'
      runuser -l student -c 'sudo chown $(id -u):$(id -g) $HOME/.kube/config'
      #runuser -l student -c 'wget https://training.linuxfoundation.org/cm/LFS258/LFS258_V2022-09-02_SOLUTIONS.tar.xz --user=LFtraining --password=Penguin2014'
      #runuser -l student -c 'tar -xvf LFS258_V2022-09-02_SOLUTIONS.tar.xz'
      apt-get update && apt-get upgrade -y
      echo '192.168.56.21  k8scp  cp' >> /etc/hosts
      echo '192.168.56.22  worker' >> /etc/hosts
      echo '192.168.56.23  student' >> /etc/hosts
      runuser -l student -c 'source <(kubectl completion bash)'
      runuser -l student -c 'echo "source <(kubectl completion bash)" >> $HOME/.bashrc'
      runuser -l student -c 'echo "alias k=kubectl" >> $HOME/.bashrc'
      runuser -l student -c 'echo "complete -F __start_kubectl k" >> $HOME/.bashrc'
      runuser -l vagrant -c 'echo "sudo su - student" >> $HOME/.bashrc'
      curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
      apt-get install apt-transport-https --yes
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
      apt-get update
      apt-get install helm
    SHELLSTUDENT
  end
end
